N_samples
BlankRamanAreas
names(Sample_EEMs)
sample_names
groups
groups[1]
blank1
blank2
group_names
group_names[groups[1]]
groups[1]
group_names[groups[1]]
group_names[groups[[1]]]
which(group_names == groups[1])
which(group_names == groups[2])
rm(list=ls())
# EXAMPLE DATA SET UP -------------
working_directory = "/home/sane/Documents/Bioinformatics/Projects/Redhill/script_rewrite"
setwd(working_directory)
# sample key
example_file_list <- grep("SEM.dat",
list.files(data_directory),
value = T)
example_key <- data.frame(UniqueID = paste0("name_",1:length(example_sample_list)),
sample_file = example_sample_list)
write.csv(example_key,"example_key.csv")
# ORGANIZE DATA --------------------
# file directory
data_directory = "../example_data/"
run_name = "test_run"
# set working directory
setwd(data_directory)
# aqualog outputs data files (*.dat) and blank files (*.ogw)
# *.dat files include raw data BEM, SEM, and ABS
writeLines(paste0("Reading data files in directory: ", data_directory))
all_files <- list.files(data_directory)
dat_files <- grep(".dat", all_files, value = T)
blank_files <- grep("Sample0001BEM", dat_files, value = T)
SEM_files <- grep("SEM", dat_files, value = T)
ABS_files <- grep("ABS", dat_files, value = T)
# summarize files and samples
samples      <- gsub("(Sample\\d+).+", "\\1", dat_files, perl = T)
sample_names <- unique(samples)
N_samples    <- length(sample_names)
N_blanks     <- length(blank_files)
if(N_samples < 1)  warning("No sample data files (*.dat) in the directory!")
if(N_blanks  < 1)  warning("No blank files (*.ogw) in the directory!")
groups       <- gsub("(Group\\d+).+", "\\1", dat_files, perl = T)
group_names  <- unique(groups)
N_groups     <- length(group_names)
samples_per_group <- sapply(group_names, function(x) length(groups[groups == x]) /3)
if(any(samples_per_group > 7)){ warning("There are a lot of samples per blank, maybe double check that"); print(samples_per_group)}
if(N_groups != N_blanks) warning("The number of groups does not match the number of blanks!")
typical_group_size <- names(sort(table(samples_per_group), decreasing = TRUE)[1])
last_group_size    <- tail(samples_per_group, 1)
writeLines(paste0("Total N samples = ", N_samples , "\n",
"Total N groups = ", N_groups, "\n",
"Total N blanks  = ", N_blanks, "\n",
"N samples in each group = ", typical_group_size, "\n",
"N samples in last group = ", last_group_size
)
)
# assign blanks for each group
# for blank1, use the blank corresponding to the group name
# for blank2, use the blank of the next group, or the first blank for the last group
blank1 <- sapply(group_names, function(x) grep(x, blank_files, value = T))
blank2 <- c(tail(blank1, -1), head(blank1, 1))
names(blank2) <- group_names
# compile summary into spreadsheet
sample_sheet <- data.frame(
unique_id = paste0("ID_", 1:length(samples)),
sample = samples,
group  = groups,
SEM_file = SEM_files,
blank1 = blank1[groups],
blank2 = blank2[groups]
)
# add absorbance files, if any are found
ABS_collected <- FALSE
if(length(ABS_files) > 1){
ABS_collected <- TRUE
writeLines("Absorbance files detected, including absorbanve data")
sample_sheet$ABS_file <- ABS_files
} else(warning("No absorbance data files (*ABS.dat) found in directory, skipping absorbance analysis"))
# write out
sample_sheet_file = paste0(run_name, "_sample_sheet.csv")
writeLines(paste0("writing out sample_sheet as: ", sample_sheet_file))
write.csv(sample_sheet, sample_sheet_file)
# READ IN EEM DATA --------------------------------------------------
# Using the files organized above, read in the excitation/emission matrices for each sample
# set aqualog parameters
Slitwidth = 5
ExStart   = 240
ExEnd     = 500
ExStep    = 5
EmStart   = 248   # these values are designed to estimate the range of emissions matching the number of Aqualog export rows...
EmEnd     = 824.6 # ...assuming there is a EmStep distance between each row or each emission value.
EmStep    = 4.65  # On the aqualog this is dictated by the number of pixels assigned to integrate 4.65nm = 8 pixels
# calculate array size
# these develop axis values for Ex/Em, example 500 495 490 ... 245 240
Ex = seq(from = ExEnd, to = ExStart, by = -ExStep)
Em = seq(from = EmStart, to = EmEnd, by = EmStep)
# this selects the appropriate range of the scans to be read in by dlmread
# Typical Aqualog scans for Nelson Lab are 53 columns (Ex) and 125 rows (Em)
Ex_range <- length(Ex)
Em_range <- length(Em)
# get SEM data from files as matrix
read_SEM <- function(sem_file){
# read specified region of the emission/excitation matrix
as.matrix(read.table(sem_file, header = T, row.names = 1)[1:Em_range, 1:Ex_range])
}
Sample_EEMs <- lapply(SEM_files, read_SEM) # sample EEM data
Blank1_EEMs <- lapply(blank1, read_SEM) # blank1 EEM data
Blank2_EEMs <- lapply(blank2, read_SEM) # blank2 EEM data
# average blanks 1 and 2
BlankAverages <- lapply(1:length(Blank1_EEMs), function(i) (Blank1_EEMs[[i]] + Blank2_EEMs[[i]]) / 2 )
# READ IN ABSORBANCE DATA ------------------------------------------
# If there was absorbance data recorded, read that in
# absorbance measurements are used to correct excitation/emission values
# The equation and calculations to perform the correction are detailed below
if(isTRUE(ABS_collected)){
# absorbance values are collected at the same wavelengths as excitation
Abs = Ex
Ab_range <- length(Abs)
# read in specified region of the absorbance matrix
read_ABS <- function(abs_file){
abs_table <- read.table(abs_file, row.names = 1)
abs_vec <- abs_table[[1]]
names(abs_vec) <- row.names(abs_table)
return(abs_vec)
}
Sample_ABSs <- lapply(ABS_files, read_ABS)
# Generate a correction factor for each EEM value (Kothwala et al. 2013, 10.4319/lom.2013.11.616, equation 2)
# this is the 'Inner Filter Effect' correction
# To perform the correction, identify the absorbance value corresponding to each emission and excitation wavelength
# For excitation, this is easy because absorbance is measured at the same wavelengths as excitation
# To pair up absorbance readings with emissions, find the nearest absorbance measurement that is < the emission wavelength
Abs_equals_Em  <- sapply(Em, function(x) as.character(Abs[Abs < x][1]))
Abs_equals_Ex  <- as.character(Ex)
# define formula for calculating correction at each combination of emission and excitation
# x = the absorption value at a given emission wavelength
# y = the absorption value at a given excitation wavelength
ABA_IFE_corection <- function(x, y) 10^(0.5 *(x + y))
# for each sample:
# calculate a corrected fluorescence for each pair of Excitation/Emission values
Sample_IFE_cors <- lapply(Sample_ABSs, function(abs_vec){
x = abs_vec[Abs_equals_Em]
y = abs_vec[Abs_equals_Ex]
IFE_cor <- outer(x, y, ABA_IFE_corection)
return(IFE_cor)
})
}
# PERFORM EEM CORRECTIONS -------------------------------
blank_avg <- BlankAverages[[1]]
# Correction following Kothawala et al. 2013 pg 619 'Fluorescence measurements'
# Raman area of pure water integrated over emission range of 381 nm - 426 nm at excitation 350 nm
# Calculate Raman areas
# if there are no measurements at exactly 381nm and 426nm, expand the range of emission values a little bit
Ram_em_low  <- tail(Em[Em<=380], 1)
Ram_em_high <- head(Em[Em>=426], 1)
Ram_em_rows <- Em >= R_em_low & Em <= R_em_high
Ram_ex <- 350
Ram_ex_col <- which(Ex == R_ex)
# function to integrate over Raman area of an EEM matrix
Raman_integration <- function(blank_avg){
EmStep * sum(blank_avg[ Ram_em_rows, Ram_ex_col ])
}
BlankRamanAreas <- lapply(BlankAverages, Raman_integration)
# 1. Apply Inner Filter Correction
# multiply sample EEM values by the IFE correction values calculated above
Sample_EEMs_IFE <- lapply(1:N_samples,
function(i) Sample_EEMs[[i]] * Sample_IFE_cors[[i]] )
# 2. Apply Raman Scaling
# use the Raman area derived from the appropriate pair of blanks for the sample
Sample_EEMs_Ram <- lapply(1:N_samples,
function(i) Sample_EEMs_IFE[[i]] / BlankRamanAreas[[ which(group_names == groups[i]) ]])
# 3. Subtract Blanks
# divide the averaged blanks by their Raman area, then subtract that from the samples in each group
BlankAverages_Ram <- lapply(1:N_blanks,
function(i) BlankAverages[[i]] / BlankRamanAreas[[i]] )
# subtract the Raman scaled blanks from the Raman scaled samples in the appropriate group
Sample_EEMs_BlkSub <- lapply(1:N_samples,
function(i) Sample_EEMs_Ram[[i]] - BlankAverages_Ram[[ which(group_names == groups[i]) ]])
# Calculate Raman areas
# if there are no measurements at exactly 381nm and 426nm, expand the range of emission values a little bit
Ram_em_low  <- tail(Em[Em<=380], 1)
Ram_em_high <- head(Em[Em>=426], 1)
Ram_em_rows <- Em >= Ram_em_low & Em <= Ram_em_high
Ram_ex <- 350
Ram_ex_col <- which(Ex == R_ex)
# function to integrate over Raman area of an EEM matrix
Raman_integration <- function(blank_avg){
EmStep * sum(blank_avg[ Ram_em_rows, Ram_ex_col ])
}
BlankRamanAreas <- lapply(BlankAverages, Raman_integration)
# 1. Apply Inner Filter Correction
# multiply sample EEM values by the IFE correction values calculated above
Sample_EEMs_IFE <- lapply(1:N_samples,
function(i) Sample_EEMs[[i]] * Sample_IFE_cors[[i]] )
# 2. Apply Raman Scaling
# use the Raman area derived from the appropriate pair of blanks for the sample
Sample_EEMs_Ram <- lapply(1:N_samples,
function(i) Sample_EEMs_IFE[[i]] / BlankRamanAreas[[ which(group_names == groups[i]) ]])
# 3. Subtract Blanks
# divide the averaged blanks by their Raman area, then subtract that from the samples in each group
BlankAverages_Ram <- lapply(1:N_blanks,
function(i) BlankAverages[[i]] / BlankRamanAreas[[i]] )
# subtract the Raman scaled blanks from the Raman scaled samples in the appropriate group
Sample_EEMs_BlkSub <- lapply(1:N_samples,
function(i) Sample_EEMs_Ram[[i]] - BlankAverages_Ram[[ which(group_names == groups[i]) ]])
Ram_em_low  <- tail(Em[Em<=380], 1)
Ram_em_high <- head(Em[Em>=426], 1)
Ram_em_rows <- Em >= Ram_em_low & Em <= Ram_em_high
Ram_ex <- 350
Ram_ex_col <- which(Ex == R_ex)
# function to integrate over Raman area of an EEM matrix
Raman_integration <- function(blank_avg){
EmStep * sum(blank_avg[ Ram_em_rows, Ram_ex_col ])
}
BlankRamanAreas <- lapply(BlankAverages, Raman_integration)
Ram_em_low  <- tail(Em[Em<=380], 1)
Ram_em_high <- head(Em[Em>=426], 1)
Ram_em_rows <- Em >= Ram_em_low & Em <= Ram_em_high
Ram_ex <- 350
Ram_ex_col <- which(Ex == Ram_ex)
# function to integrate over Raman area of an EEM matrix
Raman_integration <- function(blank_avg){
EmStep * sum(blank_avg[ Ram_em_rows, Ram_ex_col ])
}
BlankRamanAreas <- lapply(BlankAverages, Raman_integration)
# 1. Apply Inner Filter Correction
# multiply sample EEM values by the IFE correction values calculated above
Sample_EEMs_IFE <- lapply(1:N_samples,
function(i) Sample_EEMs[[i]] * Sample_IFE_cors[[i]] )
# 2. Apply Raman Scaling
# use the Raman area derived from the appropriate pair of blanks for the sample
Sample_EEMs_Ram <- lapply(1:N_samples,
function(i) Sample_EEMs_IFE[[i]] / BlankRamanAreas[[ which(group_names == groups[i]) ]])
# 3. Subtract Blanks
# divide the averaged blanks by their Raman area, then subtract that from the samples in each group
BlankAverages_Ram <- lapply(1:N_blanks,
function(i) BlankAverages[[i]] / BlankRamanAreas[[i]] )
# subtract the Raman scaled blanks from the Raman scaled samples in the appropriate group
Sample_EEMs_BlkSub <- lapply(1:N_samples,
function(i) Sample_EEMs_Ram[[i]] - BlankAverages_Ram[[ which(group_names == groups[i]) ]])
rm(list=ls())
# first attempt to re-write the matlab script for analyzing aqualog data
# EXAMPLE DATA SET UP -------------
working_directory = "/home/sane/Documents/Bioinformatics/Projects/Redhill/script_rewrite"
setwd(working_directory)
# sample key
example_file_list <- grep("SEM.dat",
list.files(data_directory),
value = T)
example_key <- data.frame(UniqueID = paste0("name_",1:length(example_sample_list)),
sample_file = example_sample_list)
write.csv(example_key,"example_key.csv")
# ORGANIZE DATA --------------------
# file directory
data_directory = "../example_data/"
run_name = "test_run"
# set working directory
setwd(data_directory)
# aqualog outputs data files (*.dat) and blank files (*.ogw)
# *.dat files include raw data BEM, SEM, and ABS
writeLines(paste0("Reading data files in directory: ", data_directory))
all_files <- list.files(data_directory)
dat_files <- grep(".dat", all_files, value = T)
blank_files <- grep("Sample0001BEM", dat_files, value = T)
SEM_files <- grep("SEM", dat_files, value = T)
ABS_files <- grep("ABS", dat_files, value = T)
# summarize files and samples
samples      <- gsub("(Sample\\d+).+", "\\1", dat_files, perl = T)
sample_names <- unique(samples)
N_samples    <- length(sample_names)
N_blanks     <- length(blank_files)
if(N_samples < 1)  warning("No sample data files (*.dat) in the directory!")
if(N_blanks  < 1)  warning("No blank files (*.ogw) in the directory!")
groups       <- gsub("(Group\\d+).+", "\\1", dat_files, perl = T)
group_names  <- unique(groups)
N_groups     <- length(group_names)
samples_per_group <- sapply(group_names, function(x) length(groups[groups == x]) /3)
if(any(samples_per_group > 7)){ warning("There are a lot of samples per blank, maybe double check that"); print(samples_per_group)}
if(N_groups != N_blanks) warning("The number of groups does not match the number of blanks!")
typical_group_size <- names(sort(table(samples_per_group), decreasing = TRUE)[1])
last_group_size    <- tail(samples_per_group, 1)
writeLines(paste0("Total N samples = ", N_samples , "\n",
"Total N groups = ", N_groups, "\n",
"Total N blanks  = ", N_blanks, "\n",
"N samples in each group = ", typical_group_size, "\n",
"N samples in last group = ", last_group_size
)
)
# assign blanks for each group
# for blank1, use the blank corresponding to the group name
# for blank2, use the blank of the next group, or the first blank for the last group
blank1 <- sapply(group_names, function(x) grep(x, blank_files, value = T))
blank2 <- c(tail(blank1, -1), head(blank1, 1))
names(blank2) <- group_names
# compile summary into spreadsheet
sample_sheet <- data.frame(
unique_id = paste0("ID_", 1:length(samples)),
sample = samples,
group  = groups,
SEM_file = SEM_files,
blank1 = blank1[groups],
blank2 = blank2[groups]
)
# add absorbance files, if any are found
ABS_collected <- FALSE
if(length(ABS_files) > 1){
ABS_collected <- TRUE
writeLines("Absorbance files detected, including absorbanve data")
sample_sheet$ABS_file <- ABS_files
} else(warning("No absorbance data files (*ABS.dat) found in directory, skipping absorbance analysis"))
# write out
sample_sheet_file = paste0(run_name, "_sample_sheet.csv")
writeLines(paste0("writing out sample_sheet as: ", sample_sheet_file))
write.csv(sample_sheet, sample_sheet_file)
# READ IN EEM DATA --------------------------------------------------
# Using the files organized above, read in the excitation/emission matrices for each sample
# set aqualog parameters
Slitwidth = 5
ExStart   = 240
ExEnd     = 500
ExStep    = 5
EmStart   = 248   # these values are designed to estimate the range of emissions matching the number of Aqualog export rows...
EmEnd     = 824.6 # ...assuming there is a EmStep distance between each row or each emission value.
EmStep    = 4.65  # On the aqualog this is dictated by the number of pixels assigned to integrate 4.65nm = 8 pixels
# calculate array size
# these develop axis values for Ex/Em, example 500 495 490 ... 245 240
Ex = seq(from = ExEnd, to = ExStart, by = -ExStep)
Em = seq(from = EmStart, to = EmEnd, by = EmStep)
# this selects the appropriate range of the scans to be read in by dlmread
# Typical Aqualog scans for Nelson Lab are 53 columns (Ex) and 125 rows (Em)
Ex_range <- length(Ex)
Em_range <- length(Em)
# get SEM data from files as matrix
read_SEM <- function(sem_file){
# read specified region of the emission/excitation matrix
as.matrix(read.table(sem_file, header = T, row.names = 1)[1:Em_range, 1:Ex_range])
}
Sample_EEMs <- lapply(SEM_files, read_SEM) # sample EEM data
Blank1_EEMs <- lapply(blank1, read_SEM) # blank1 EEM data
Blank2_EEMs <- lapply(blank2, read_SEM) # blank2 EEM data
# average blanks 1 and 2
BlankAverages <- lapply(1:length(Blank1_EEMs), function(i) (Blank1_EEMs[[i]] + Blank2_EEMs[[i]]) / 2 )
# READ IN ABSORBANCE DATA ------------------------------------------
# If there was absorbance data recorded, read that in
# absorbance measurements are used to correct excitation/emission values
# The equation and calculations to perform the correction are detailed below
if(isTRUE(ABS_collected)){
# absorbance values are collected at the same wavelengths as excitation
Abs = Ex
Ab_range <- length(Abs)
# read in specified region of the absorbance matrix
read_ABS <- function(abs_file){
abs_table <- read.table(abs_file, row.names = 1)
abs_vec <- abs_table[[1]]
names(abs_vec) <- row.names(abs_table)
return(abs_vec)
}
Sample_ABSs <- lapply(ABS_files, read_ABS)
# Generate a correction factor for each EEM value (Kothwala et al. 2013, 10.4319/lom.2013.11.616, equation 2)
# this is the 'Inner Filter Effect' correction
# To perform the correction, identify the absorbance value corresponding to each emission and excitation wavelength
# For excitation, this is easy because absorbance is measured at the same wavelengths as excitation
# To pair up absorbance readings with emissions, find the nearest absorbance measurement that is < the emission wavelength
Abs_equals_Em  <- sapply(Em, function(x) as.character(Abs[Abs < x][1]))
Abs_equals_Ex  <- as.character(Ex)
# define formula for calculating correction at each combination of emission and excitation
# x = the absorption value at a given emission wavelength
# y = the absorption value at a given excitation wavelength
ABA_IFE_corection <- function(x, y) 10^(0.5 *(x + y))
# for each sample:
# calculate a corrected fluorescence for each pair of Excitation/Emission values
Sample_IFE_cors <- lapply(Sample_ABSs, function(abs_vec){
x = abs_vec[Abs_equals_Em]
y = abs_vec[Abs_equals_Ex]
IFE_cor <- outer(x, y, ABA_IFE_corection)
return(IFE_cor)
})
}
# PERFORM EEM CORRECTIONS -------------------------------
blank_avg <- BlankAverages[[1]]
# Correction following Kothawala et al. 2013 pg 619 'Fluorescence measurements'
# Raman area of pure water integrated over emission range of 381 nm - 426 nm at excitation 350 nm
# Calculate Raman areas
# if there are no measurements at exactly 381nm and 426nm, expand the range of emission values a little bit
Ram_em_low  <- tail(Em[Em<=380], 1)
Ram_em_high <- head(Em[Em>=426], 1)
Ram_em_rows <- Em >= Ram_em_low & Em <= Ram_em_high
Ram_ex <- 350
Ram_ex_col <- which(Ex == Ram_ex)
# function to integrate over Raman area of an EEM matrix
Raman_integration <- function(blank_avg){
EmStep * sum(blank_avg[ Ram_em_rows, Ram_ex_col ])
}
BlankRamanAreas <- lapply(BlankAverages, Raman_integration)
# 1. Apply Inner Filter Correction
# multiply sample EEM values by the IFE correction values calculated above
Sample_EEMs_IFE <- lapply(1:N_samples,
function(i) Sample_EEMs[[i]] * Sample_IFE_cors[[i]] )
# 2. Apply Raman Scaling
# use the Raman area derived from the appropriate pair of blanks for the sample
Sample_EEMs_Ram <- lapply(1:N_samples,
function(i) Sample_EEMs_IFE[[i]] / BlankRamanAreas[[ which(group_names == groups[i]) ]])
# 3. Subtract Blanks
# divide the averaged blanks by their Raman area, then subtract that from the samples in each group
BlankAverages_Ram <- lapply(1:N_blanks,
function(i) BlankAverages[[i]] / BlankRamanAreas[[i]] )
# subtract the Raman scaled blanks from the Raman scaled samples in the appropriate group
Sample_EEMs_BlkSub <- lapply(1:N_samples,
function(i) Sample_EEMs_Ram[[i]] - BlankAverages_Ram[[ which(group_names == groups[i]) ]])
# REMOVE RAYLEIGH SCATTERING ------------------------------------
Em[1]
i = 1
w
w = Em[1] - Ex[i] - (2 * Slitwidth)
w
s = w * -1 / EmStep
s
1:round(length(Ex))
length(Ex)
# REMOVE RAYLEIGH SCATTERING ------------------------------------
#subtract Rayleigh scatter by cutting away slit widths
# for each excitation value
w = Em[1] - Ex - (2 * Slitwidth)
w
s = w * -1 / EmStep
s
Em[1]
dim(Sample_EEMs_BlkSub[[1]])
s
w
s
1:s
1:s[1]
s[1]
w[1]
which(w < 0)
w
s
plot(s)
Sample_EEMs_Ray <- lapply(Sample_EEMs_BlkSub, function(sample_eem){
# for each extraction wavelength, if w is negative, subtract all values less than s
for(i in which(w < 0)){
sample_eem[ 1:s[i] , i] <- 0
}
})
Sample_EEMs_Ray[[1]]
Sample_EEMs_Ray <- lapply(Sample_EEMs_BlkSub, function(sample_eem){
# for each extraction wavelength, if w is negative, subtract all values less than s
for(i in which(w < 0)){
sample_eem[ 1:s[i] , i] <- 0
}
return(sample_eem)
})
Sample_EEMs_Ray[[1]]
Sample_EEMs_Ray <- lapply(Sample_EEMs_BlkSub, Remove_Rayleigh)
# function to remove rayleigh scattering from an EEM matrix
Remove_Rayleigh <- function(eem){
# for each extraction wavelength, if w is negative, subtract all values less than s
for(i in which(w < 0)){
eem[ 1:s[i] , i] <- 0
}
return(sample_eem)
}
Sample_EEMs_Ray <- lapply(Sample_EEMs_BlkSub, Remove_Rayleigh)
# function to remove rayleigh scattering from an EEM matrix
Remove_Rayleigh <- function(eem){
# for each extraction wavelength, if w is negative, subtract all values less than s
for(i in which(w < 0)){
eem[ 1:s[i] , i] <- 0
}
return(eem)
}
Sample_EEMs_Ray <- lapply(Sample_EEMs_BlkSub, Remove_Rayleigh)
Blank1_Ray <- lapply(Blank1_Ram, Remove_Rayleigh)
# also correct the blanks
Blank1_Ram <- lapply(1:N_blanks,
function(i) Blank1[[i]] / BlankRamanAreas[[i]])
# also correct the blanks
Blank1_EEMs_Ram <- lapply(1:N_blanks,
function(i) Blank1_EEMs[[i]] / BlankRamanAreas[[i]])
Blank2_EEMs_Ram <- lapply(1:N_blanks,
function(i) Blank2_EEMs[[i]] / BlankRamanAreas[[i]])
# remove Rayleigh scattering from samples and blanks
Sample_EEMs_Ray <- lapply(Sample_EEMs_BlkSub, Remove_Rayleigh)
Blank1_Ray <- lapply(Blank1_Ram, Remove_Rayleigh)
Blank1_Ray <- lapply(Blank1_EEMs_Ram, Remove_Rayleigh)
Blank2_Ray <- lapply(Blank2_EEMs_Ram, Remove_Rayleigh)
?dir.create
Sample_EEMs_Ray[[1]]
?file.path
file.path("processed_data", sample_names)
sample_output_files <- file.path("processed_data", paste0(sample_names,"_","clean.csv"))
sample_output_files <- file.path("processed_data", paste0(sample_names,"_","clean.csv"))
# WRITE OUT PROCESSED EEMs
if(!dir.exists("processed_data")){
dir.create("processed_data")
}
sample_output_files <- file.path("processed_data", paste0(sample_names,"_","clean.csv"))
lapply(1:N_samples, function(i) write.csv(Sample_EEMs_Ray[[i]], sample_output_files[i]) )
Sample_EEMs_Ray[[1]]
i = 1
write.csv(Sample_EEMs_Ray[[i]], sample_output_files[i])
?write.csv
Sample_EEMs_Ray[[i]]
sample_output_files[i]
lapply(1:N_samples, function(i) write.csv(as.data.frame(Sample_EEMs_Ray[[i]]), sample_output_files[i]) )
lapply(1:N_samples, function(i) write.csv(Sample_EEMs_Ray[[i]], sample_output_files[i]) )
